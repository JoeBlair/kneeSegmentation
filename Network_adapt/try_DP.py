import scipy.io as io
import numpy as np
import os
from scipy.ndimage import morphology
import os
from joblib import Parallel, delayed
import gc

def get_paths(path):

    path = path
    listing = os.listdir(path)
    paths = np.empty([0])

    for i in listing:

        paths = np.hstack((paths, str(path + '/' + i)))

    return paths

def strat_sample(image_path):

    A = io.loadmat(image_path)

    Nd = np.prod(A['scanROI'].shape)

    Label = np.zeros(A['scanROI'].shape)
    Label[A['goldROI'] == 2] = 1
    Label = Label.reshape(Nd)

    Pos_Samp_ind = np.squeeze(np.where(Label > 0))
    N_samp = np.shape(Pos_Samp_ind)[0]

    Neg_Samp_ind = np.random.choice(np.squeeze(np.where(Label == 0)), N_samp/2, replace=False)

    Index = np.hstack((Pos_Samp_ind, Neg_Samp_ind))
    np.random.shuffle(Index)

    I =  np.asarray(np.unravel_index(Index, A['scanROI'].shape, order = 'C'))
    Ind_Labs = np.int32(I.reshape(3,1, I.shape[1]).T)

    Labels = Label[Index]

    return np.float32(Ind_Labs), np.float32(Labels)


def Sampling(image_path):
    """
    :param image_path: path to image generated by get_paths
    :param patch_sizes: a list or array of patch sizes desired for convolution. Must be odd > 1.
    :param total_sample_size: sampled patches for convolution, and corresponding labels
    :return: sampled patches for convolution, and corresponding labels
    """

    # Load image from path
    Image = io.loadmat(image_path)
    # Extract total number of voxels
    Dims = np.prod(Image['scanROI'].shape)
    
    # Create 1 mask image
    Label = np.zeros(Image['scanROI'].shape)
    Label[Image['goldROI'] == 2] = 1
   
 #   if Image['isright'] == 0:
 
  #      Scan = np.fliplr(Image["scanROI"])
   #     Label = np.fliplr(Label)

    Scan = Image["scanROI"]
    
    Gold_ind = np.squeeze(np.where(Label == 1))
   
 #   B = morphology.distance_transform_cdt(np.absolute(Label-1))
  #  B = B.reshape(Dims)
  #  X =  np.float32(range(np.max(B), 1, -1))/range(2, np.max(B)+1, 1)
    No_samples = np.shape(Gold_ind)[1]*3.5
  #  Index = np.array([])
  #  samples = np.divide(X, sum(X))*No_samples

   # for i in range(1, np.max(B)):

    #    Index = np.int32(np.append(Index, np.random.choice(np.squeeze(np.where(B == i)),(samples[i-1]), replace=False)))
    Index = np.random.choice(np.squeeze(np.where(Label.reshape(Dims)== 0)),No_samples , replace=False)

    Label = Label.reshape(Dims)

    # Find indexes of voxels to sample
    Gold_ind = np.squeeze(np.where(Label > 0))
    
 #   P_ind = np.squeeze(np.where(B == 1))
  
    Index = np.hstack((Gold_ind, Index))

    np.random.shuffle(Index)

    Inds =  np.asarray(np.unravel_index(Index, Scan.shape, order = 'C'))
    Indie =  Inds.reshape(3,1, Inds.shape[1]).T
    Label_Sample = Label[Index]
    Label_sample = np.int32(Label_Sample.reshape(len(Label_Sample)))
    return Scan, Label_sample, np.float32(Indie)


def Patch_3D(image_path, patch_size):
    image, Label, indeces =  Sampling(image_path)

    n = (patch_size -1)/2
    m = patch_size

    image_pad = np.pad(image, pad_width=n, mode='constant', constant_values = 0)

    Patches = np.array([])

    for i in range(0, len(indeces)):

        Patches = np.float32(np.append(Patches, (image_pad[indeces[i][0]:indeces[i][0]+m,indeces[i][1]:indeces[i][1]+m,indeces[i][2]:indeces[i][2]+m])))

    return Patches

def Tri_Image_Load(path):

    A = io.loadmat(path)

    Label = np.zeros(A['scanROI'].shape)
    Label[A['goldROI'] == 2] = 1
 #   Label[A['classIm'] == 3] = 2
    indeces = np.squeeze(np.where(Label >= 0))
    
    indie = np.float32(indeces.reshape(3,1, indeces.shape[1]))
    ind = np.divide(indie.T, Label.shape)
    return indeces.T, Label, A ,indie.T, np.float32(ind)

def frame(indeces, image_pad, m):
    D = ((m-1)/2)+1
    XY_Patches = np.float32(image_pad[indeces[0]:indeces[0]+m, indeces[1]:indeces[1]+m,  indeces[2]+D])
    XZ_Patches = np.float32(image_pad[indeces[0]:indeces[0]+m, indeces[1]+D,                  indeces[2]:indeces[2]+m])
    YZ_Patches = np.float32(image_pad[indeces[0]+D,                 indeces[1]:indeces[1]+m,  indeces[2]:indeces[2]+m])
    return XY_Patches, XZ_Patches, YZ_Patches

def frame_2D(indeces, image_pad, m):
    D = ((m-1)/2)+1
    XZ_Patches = np.float32(image_pad[indeces[0]:indeces[0]+m, indeces[1]+D,                  indeces[2]:indeces[2]+m])
    return  XZ_Patches


def Patch_planar_para(image_path, patch_size):

    Image, Label, indeces, indie = Sampling(image_path)

    n = (patch_size -1)/2
    m = patch_size

    image_pad = np.pad(Image, pad_width=n, mode='constant', constant_values = 0)

    A = Parallel(n_jobs= 1)(delayed(frame_2D)(i, image_pad, m) for i in indeces)
    A = np.array(A)
    Label = np.int32(Label.reshape(len(Label)))
    A = A.reshape(len(A), 1, m, m)

    return A, indie,  Label


def Patch_triplanar_para(image_path, patch_size):

    Image, Label, indeces, indie =  Sampling(image_path)

    n = (patch_size -1)/2
    m = patch_size

    image_pad = np.pad(Image, pad_width=n, mode='constant', constant_values = 0)

    A = Parallel(n_jobs= 1)(delayed(frame)(i, image_pad, m) for i in indeces)
    A = np.array(A)
    Label = np.int32(Label.reshape(len(Label)))

    XY, XZ, YZ =  np.hsplit(A, 3)

    return XY, XZ, YZ, indie,  Label


def frame_3D(indeces, image_pad, m):

    Patches = np.float32(image_pad[indeces[0]:indeces[0]+m,indeces[1]:indeces[1]+m,indeces[2]:indeces[2]+m])

    return Patches

def Patch_3D_para(image_path, patch_size):

    Image, Label, indeces, indie =  Sampling(image_path)

    n = (patch_size -1)/2
    m = patch_size

    image_pad = np.pad(Image, pad_width=n, mode='constant', constant_values = 0)
    Label = np.int32(Label.reshape(len(Label)))

    A = Parallel(n_jobs= 1)(delayed(frame_3D)(i, image_pad, m) for i in indeces)
    A = np.array(A)

    return A.reshape(len(indeces), 1, m, m ,m), indie,  Label


def Patch_triplanar(image_path, patch_size):

    Image, Label, indeces =  Sampling(image_path)

    n = (patch_size -1)/2
    m = patch_size

    image_pad = np.pad(Image, pad_width=n, mode='constant', constant_values = 0)

    XY_Patches = np.array([])
    XZ_Patches = np.array([])
    YZ_Patches = np.array([])

    for i in range(0, len(indeces)):

        XY_Patches = np.float32(np.append(XY_Patches, (image_pad[indeces[i][0]:indeces[i][0]+m, indeces[i][1]:indeces[i][1]+m,  indeces[i][2]])))
        XZ_Patches = np.float32(np.append(XZ_Patches, (image_pad[indeces[i][0]:indeces[i][0]+m, indeces[i][1],                  indeces[i][2]:indeces[i][2]+m])))
        YZ_Patches = np.float32(np.append(YZ_Patches, (image_pad[indeces[i][0],                 indeces[i][1]:indeces[i][1]+m,  indeces[i][2]:indeces[i][2]+m])))

    XY_Patches =  XY_Patches.reshape(len(indeces), 1, m, m)
    XZ_Patches =  XZ_Patches.reshape(len(indeces), 1, m, m)
    YZ_Patches =  YZ_Patches.reshape(len(indeces), 1, m, m)

    Label = np.int32(Label.reshape(len(Label)))
    return XY_Patches, XZ_Patches, YZ_Patches, Label

def Patch_gen(indeces, patch_size, A):

    PS = (patch_size - 1) / 2
    npad = ((PS, PS), (PS, PS), (PS,PS))
    window_size = (patch_size, patch_size, patch_size)
    m = patch_size

    image_pad = np.pad(A['scanROI'], pad_width=npad, mode='constant', constant_values = 0)
    Nd = np.prod(A['scanROI'].shape)

    A = Parallel(n_jobs= 1)(delayed(frame)(i, image_pad, m) for i in indeces)
    A = np.array(A)
    indie = indeces.reshape(3,1, A.shape[0])


    R, T, Y =  np.hsplit(A, 3)

    return R, T, Y, np.float32(indie.T)

def Patch_gen_three(indeces, patch_size, A):

    PS = (patch_size - 1) / 2
    npad = ((PS, PS), (PS, PS), (PS,PS))
    window_size = (patch_size, patch_size, patch_size)
    m = patch_size

    image_pad = np.pad(A['scanROI'], pad_width=npad, mode='constant', constant_values = 0)
    Nd = np.prod(A['scanROI'].shape)

    A = Parallel(n_jobs= 1)(delayed(frame_3D)(i, image_pad, m) for i in indeces)
    R = np.array(A)

    return R

def Big_Small(image_path, patch_size, P2):

    Image, Label, indeces, indie =  Sampling(image_path)

    n = (patch_size -1)/2
    n2 = (P2 - 1)/2
    m = patch_size
  
    image_pad = np.pad(Image, pad_width=n, mode='constant', constant_values = 0)
    image_pad2 = np.pad(Image, pad_width=n2, mode='constant', constant_values = 0)
    A = Parallel(n_jobs= 1)(delayed(frame)(i, image_pad, m) for i in indeces)
    A = np.array(A)
    Label = np.int32(Label.reshape(len(Label)))
    B = Parallel(n_jobs= 1)(delayed(frame_3D)(i, image_pad2, P2) for i in indeces)
    cube = np.array(B)
    XY, XZ, YZ =  np.hsplit(A, 3)
    return XY, XZ, YZ, cube.reshape(len(indeces), 1, P2, P2, P2), indie,  Label
